import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { ChevronRight } from "lucide-react";
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";
import { useCompany } from "../contexts/CompanyContext";
import * as XLSX from "xlsx";
import  useDebounce  from "../hooks/useDebounce";
import { ClipLoader } from "react-spinners";


const TransactionReport = () => {
  const { companyName } = useCompany();
  const storedUser = localStorage.getItem("userName");
  const LoggedUser = storedUser.replace(/["\n]/g, "").trim();
  
  // State Management
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [reportData, setReportData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [loadingExcel, setLoadingExcel] = useState(false);
  const [loadingPdf, setLoadingPdf] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const debouncedSearchTerm = useDebounce(searchTerm, 500);

  const [searchDebounce, setSearchDebounce] = useState(null);

  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(50);
  const [totalRecords, setTotalRecords] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [devices, setDevices] = useState([]);
  const [selectedDevice, setSelectedDevice] = useState("");
  const [selectedDepartment, setSelectedDepartment] = useState("");
  const [departments, setDepartments] = useState([]);


  // const MyDocument = () => (
  //   <Document>
  //     <Page size="A4" style={styles.page}>
  //       <View style={styles.section}>
  //         <View style={styles.headerRow}>
  //           <Text style={styles.title}>Report Type: Transaction</Text>
  //           <Text style={styles.dateText}>
  //             Generated from: {startDate} to {endDate}
  //           </Text>
  //         </View>
  //         <View style={styles.headerRow}>
  //           <Text style={styles.generatedByText}>Generated by: {LoggedUser}</Text>
  //           <Text style={styles.companyText}>Company Name: {companyName}</Text>
  //         </View>
  //         <View style={styles.table}>
  //           <View style={styles.tableHeaderRow}>
  //             <Text style={[styles.tableHeaderCell, styles.columnID]}>ID</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Name</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Department</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Date</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>In Time</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>State</Text>
  //             <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Device</Text>
  //           </View>
  //           {reportData.map((row, index) => (
  //             <View key={index} style={styles.tableRow}>
  //               <Text style={[styles.tableCell, styles.columnID]}>{row.employeeid}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.employeename}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.department || "-"}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.punchindate}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.punchintime}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.punchinstate}</Text>
  //               <Text style={[styles.tableCell, styles.columnFlex]}>{row.devicename || "-"}</Text>
  //             </View>
  //           ))}
  //         </View>
  //       </View>
  //     </Page>
  //   </Document>
  // );
  const exportToExcel = () => {

    fetchExportData(); 
 
  };

  const exportToPdf = () => {
    fetchExportpdfData();
  };
  
  const fetchReport = async () => {
    setLoading(true);
    setError("");

    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/Transaction-report`,
        {
          params: {
            startDate,
            endDate,
            selectedDevice,
            selectedDepartment,
            searchTerm: debouncedSearchTerm,
            limit: itemsPerPage,
            page: currentPage,
            
          },
        }
      );
      
      setReportData(response.data.data);
      setTotalRecords(response.data.pagination.totalRecords);
      setTotalPages(response.data.pagination.totalPages);
    } catch (error) {
      console.error("Error fetching report:", error);
      setError("Failed to fetch the report. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const fetchExportData = async () => {
    setLoadingExcel(true);
    setError("");
    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/Transaction-report`,
        {
          params: {
            startDate,
            endDate,
            selectedDevice,
            selectedDepartment,
            searchTerm: debouncedSearchTerm,
            limit: itemsPerPage,
            page: currentPage,
            p_export_excel: true,
            companyName: companyName,
           // employeewise
           LoggedUser: LoggedUser,
          },
          responseType: 'arraybuffer', 
        }
      );
  
      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;

    
      const currentDate = new Date();
      
      // Get the day, month, year, hours, and minutes
      const day = currentDate.getDate().toString().padStart(2, '0');
      const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');  // Months are zero-indexed
      const year = currentDate.getFullYear();
      const hours = currentDate.getHours().toString().padStart(2, '0');
      const minutes = currentDate.getMinutes().toString().padStart(2, '0');
      
      // Format the date and time in the desired format
      const formattedDateTime = `${day}/${month}/${year}-${hours}:${minutes}`;
      
      // Construct the filename
      const filename = `TransactionReport-${formattedDateTime}.xlsx`;
    
      link.setAttribute('download', filename);  
      document.body.appendChild(link);
      link.click();  // Trigger the download
      link.remove();
    } catch (error) {
      setError("Failed to fetch the report data for export.");
      console.error("Error fetching report data for export:", error);
    } finally {
      setLoadingExcel(false);
    }
  };

  const fetchExportpdfData = async () => {
    setLoadingPdf(true);
    setError("");
    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/Transaction-report`, // Make sure this endpoint is correct for PDF export
        {
          params: {
            startDate,
            endDate,
            selectedDevice,
            selectedDepartment,
            searchTerm: debouncedSearchTerm,
            limit: itemsPerPage,
            page: currentPage,
            p_export_pdf: true, // Flag to specify we're exporting PDF
            companyName: companyName,
            LoggedUser: LoggedUser,
          //  employeewise
          },
          responseType: 'arraybuffer', // Ensure we receive the file as a binary array
        }
      );
  
      const blob = new Blob([response.data], { type: 'application/pdf' });
  
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
  
      const currentDate = new Date();
      const day = currentDate.getDate().toString().padStart(2, '0');
      const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
      const year = currentDate.getFullYear();
      const hours = currentDate.getHours().toString().padStart(2, '0');
      const minutes = currentDate.getMinutes().toString().padStart(2, '0');
  
      const formattedDateTime = `${day}/${month}/${year}-${hours}:${minutes}`;
  
      const filename = `TransactionReport-${formattedDateTime}.pdf`;
  
      // Set the download attribute with the filename
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click(); // Trigger the download
      link.remove(); // Clean up
    } catch (error) {
      setError("Failed to fetch the report data for export.");
      console.error("Error fetching report data for export:", error);
    } finally {
      setLoadingPdf(false);
    }
  };
  
  // Initial Setup
  useEffect(() => {
    const today = new Date();
    const twoDaysAgo = new Date(today);
    twoDaysAgo.setDate(today.getDate() - 2);

    setStartDate(twoDaysAgo.toISOString().split("T")[0]);
    setEndDate(today.toISOString().split("T")[0]);
    
    fetchDevices();
    fetchDepartments();
  }, []);

  // API Calls
  const fetchDevices = async () => {
    try {
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/devices`);
      setDevices(response.data.devices);
    } catch (error) {
      setError("Failed to fetch devices.");
    }
  };

  const fetchDepartments = async () => {
    try {
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/departments`);
      setDepartments(response.data);
    } catch (error) {
      console.error("Failed to fetch departments:", error);
    }
  };


  useEffect(() => {
    if (startDate && endDate) {
      fetchReport();
    }
  }, [startDate, endDate, selectedDevice, selectedDepartment, currentPage, itemsPerPage,debouncedSearchTerm]);

  // Pagination Handlers
  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(prev => prev + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(prev => prev - 1);
    }
  };

  return (
    <div className="max-w-7xl mx-auto">
      {/* Breadcrumb */}
      <div className="mb-2">
        <nav className="flex" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <Link to="/reports" className="inline-flex items-center text-gray-700 hover:text-blue-600">
                Reports
              </Link>
            </li>
            <li>
              <div className="flex items-center">
                <ChevronRight className="w-4 h-4 text-gray-400" />
                <span className="ml-1 text-gray-500 md:ml-2">Transaction Report</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>

      {/* Filters Section */}
      <div className="bg-white rounded-lg shadow-md p-3 mb-3">
        <div className="flex space-x-6">
          {/* Date Inputs */}
          <div className="w-[220px]">
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">
              Start Date
            </label>
            <input
              type="date"
              id="startDate"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>

          <div className="w-[220px]">
            <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">
              End Date
            </label>
            <input
              type="date"
              id="endDate"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>

          {/* Device Select */}
          <div className="w-[220px] mt-6">
            <select
              value={selectedDevice}
              onChange={(e) => setSelectedDevice(e.target.value)}
              className="w-[220px] p-3 h-[50px] border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            >
              <option value="" disabled hidden>Select device</option>
              {devices.map((device) => (
                <option key={device.serial_number} value={device.serial_number}>
                  {device.device_name}
                </option>
              ))}
            </select>
          </div>

          <select
            className="block w-[220px] mt-6 h-[48px] px-2 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            value={selectedDepartment}
            onChange={(e) => setSelectedDepartment(e.target.value)}
          >
            <option value="">All Departments</option>
            {departments.map((department) => (
              <option key={department.department_name} value={department.id}>
                {department.department_name}
              </option>
            ))}
          </select>

          <input
            type="text"
            placeholder="Search by  Name, ID,C.ID"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-60 h-15 mt-7 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
          />
        </div>
    

        <div className="flex space-x-4 mt-4 ml-[1000px]">
    

      <button
        onClick={exportToPdf}
        className="flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all duration-300 shadow-md"
        disabled={loadingPdf} // Disable button while exporting
      >
        {loadingPdf ? (
          <ClipLoader color="#ffffff" loading={true} size={20} />
        ) : (
          <>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
            PDF
          </>
        )}
      </button>

      <button
        onClick={exportToExcel}
        className="flex items-center px-4 py-2 bg-green-800 text-white rounded-lg hover:bg-green-600 transition-all duration-300 shadow-md"
        disabled={loadingExcel} 
      >
        {loadingExcel ? (
          <ClipLoader color="#ffffff" loading={true} size={20} />
        ) : (
          <>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Excel
          </>
        )}
      </button>
    </div>


        </div>
  
        {/* Error Message */}
        {error && (
          <p className="text-red-500 text-center mb-4 text-sm">{error}</p>
        )}
  
        {/* Report Table */}
        {reportData.length > 0 ? (
  <div className="overflow-x-auto bg-white shadow-md rounded-lg">
    <table className="min-w-full bg-white border-collapse table-auto text-sm cursor-pointer">
      <thead className="bg-gray-100">
        <tr>
          <th className="px-8 py-2 text-nowrap text-left font-large text-gray-900">ID</th>
          <th className="px-8 py-2 text-nowrap text-left font-large text-gray-900">C.ID</th>
          <th className="px-8 text-nowrap text-left font-large text-gray-900">Name</th>
          <th className="px-8 text-nowrap text-left font-large text-gray-900">Device</th>
          <th className="px-2 text-nowrap text-left font-large text-gray-900">Department</th>
          <th className="px-8 text-nowrap text-left font-large text-gray-900">Date</th>
          <th className="px-3 text-nowrap text-left font-large text-gray-900">In Time</th>
          <th className="px-8 text-nowrap text-center font-large text-gray-900">State</th>
        </tr>
      </thead>
      <tbody>
        {loading ? (
          <tr>
            <td className="text-center py-4" colSpan="8">
              <ClipLoader color="#3498db" loading={true} size={50} />
            </td>
          </tr>
        ) : (
          reportData.length > 0 ? (
            reportData.map((row, index) => (
              <tr
                key={index}
                className="border-b hover:bg-gray-50 transition duration-200 cursor-pointer"
              >
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.employeeid || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.companyid || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.employeename || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.devicename || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.department || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.punchindate || "-"}
                </td>
                <td className="px-4 text-nowrap text-left text-gray-800">
                  {row.punchintime || "-"}
                </td>
                <td className="px-10 text-left text-nowrap text-gray-800">
                  {row.punchinstate || "-"}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td className="text-center text-gray-500 py-4" colSpan="8">
                No matching records found.
              </td>
            </tr>
          )
        )}
      </tbody>
    </table>
  </div>
) : (
  <div className="text-center text-gray-500 py-4">
    <p>No records available for Selected Dates</p>
  </div>
)}

  
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <div className="flex justify-around items-center mt-4">
            <button
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
            >
              Previous
            </button>
            <span className="text-sm">
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
            >
              Next
            </button>
          </div>
        )}
      </div>
    );
  };
  
  export default TransactionReport;