import React, { useState, useEffect } from "react";
import axios from "axios";
import { ArrowLeft } from "lucide-react";
import { Link } from "react-router-dom";
import { ChevronRight } from "lucide-react";
import { PDFDownloadLink } from "@react-pdf/renderer";
import { Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";
import * as XLSX from "xlsx";
import { useCompany } from "../contexts/CompanyContext";

const AbsentReport = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [reportData, setReportData] = useState([]);
  

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(20);
  const { companyName } = useCompany();
  const storedUser = localStorage.getItem('userName');

 const LoggedUser = storedUser.replace(/["\n]/g, '').trim();

  const AbsentReportPDF = ({ data, startDate, endDate }) => (
    <Document>
      <Page size="A4" style={styles.page}>
      <View style={styles.headerRow}>
          <Text style={styles.title}>Report Type :Absent </Text>
<Text style={styles.dateText}>Generated from: {startDate} to  {endDate}</Text>
</View>
<View style={styles.headerRow}>
  <Text style={styles.generatedByText}>Generated by: {LoggedUser}</Text>
  <Text style={styles.companyText}>Company Name: {companyName}</Text>
</View>

        <View style={styles.table}>
          <View style={styles.tableRow}>
            <Text style={{...styles.tableCell, ...styles.headerCell, width: "20%"}}>ID</Text>
            <Text style={{...styles.tableCell, ...styles.headerCell, width: "25%"}}>Name</Text>
            <Text style={{...styles.tableCell, ...styles.headerCell, width: "20%"}}>Designation</Text>
            <Text style={{...styles.tableCell, ...styles.headerCell, width: "20%"}}>Department</Text>
            <Text style={{...styles.tableCell, ...styles.headerCell, width: "15%"}}>Date</Text>
          </View>
          {data.map((row, i) => (
            <View key={i} style={styles.tableRow}>
              <Text style={{...styles.tableCell, width: "20%"}}>{row.employeeid}</Text>
              <Text style={{...styles.tableCell, width: "25%"}}>{row.employeename}</Text>
              <Text style={{...styles.tableCell, width: "20%"}}>{row.designation}</Text>
              <Text style={{...styles.tableCell, width: "20%"}}>{row.department}</Text>
              <Text style={{...styles.tableCell, width: "15%"}}>{row.date}</Text>
            </View>
          ))}
        </View>
      </Page>
    </Document>
  );
  const styles = StyleSheet.create({
    page: { 
      padding: 20 
    },
    title: {
      fontSize: 11,
      fontWeight: "bold",
      textAlign: "left", // Center title
    },
    headerRow: {
      flexDirection: "row", // Create a horizontal layout for Generated By and Company Name
      justifyContent: "space-between", // Space out the two elements
      marginBottom: 10,
    },
    generatedByText: {
      fontSize: 11,
      fontWeight: "bold",
      textAlign: "left", // Left-aligned text
      flex: 1, // Allow this section to take available space
    },
    companyText: {
      fontSize: 11,
      fontWeight: "bold",
      textAlign: "right", // Right-aligned text
      flex: 1, // Allow this section to take available space
    },
    dateText: {
      fontSize: 11,
      textAlign: "right", // Center Date Range
      marginVertical: 5,
    },
    table: { 
      display: "table", 
      width: "100%", 
      borderStyle: "solid", 
      borderWidth: 0.5 
    },
    tableRow: { 
      flexDirection: "row",
      minHeight:3
    },
    tableCell: { 
      padding: 3,
      fontSize: 10,
      borderWidth: 0.5,
      borderStyle: "solid",
      textAlign: 'center'
    },
    headerCell: { 
      backgroundColor: "#f3f4f6", 
      fontWeight: "bold",
      fontSize: 9
    }
  });
  
  useEffect(() => {
    const today = new Date();
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 2); 

    const startDateString = sevenDaysAgo.toISOString().split("T")[0]; // Format as YYYY-MM-DD
    const endDateString = today.toISOString().split("T")[0]; // Format as YYYY-MM-DD

    setStartDate(startDateString);
    setEndDate(endDateString);
  }, []);

  useEffect(() => {
    if (startDate && endDate) {
      fetchReport();
    }
  }, [startDate, endDate]); // This effect runs when startDate or endDate changes

  const fetchReport = async () => {
    setLoading(true);
    setError("");

    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/Absent-report`,
        {
          params: { startDate, endDate },
        }
      );
      setReportData(response.data.data);
    } catch (error) {
      console.error("Error fetching report:", error);
      setError("Failed to fetch the report. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Filter report data based on search term
  const filteredData = reportData.filter((row) =>
    row.employeename.toLowerCase().includes(searchTerm.toLowerCase())
  );

  function formatTime(minutes) {
    if (!minutes || minutes === "-") return "-"; // If no value is provided, return '-'

    // Convert minutes to total seconds and round to the nearest whole second
    const totalSeconds = Math.round(minutes * 60);

    // Calculate hours, minutes, and seconds
    const hours = Math.floor(totalSeconds / 3600);
    const mins = Math.floor((totalSeconds % 3600) / 60);
    const secs = totalSeconds % 60;

    // Return formatted time as HH:MM:SS
    return `${String(hours).padStart(2, "0")}:${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
}


  // Paginate the filtered data
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage((prevPage) => prevPage - 1);
    }
  };

  const handleExportExcel = () => {
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.json_to_sheet(filteredData); // Convert data to worksheet
    XLSX.utils.book_append_sheet(wb, ws, "Absent Report");

    // Create a download link and trigger download
    XLSX.writeFile(wb, `absent-report-${startDate}-to-${endDate}.xlsx`);
  };

  return (
    
    <div className="max-w-7xl mx-auto">
   <div className="mb-2">
  <nav className="flex" aria-label="Breadcrumb">
    <ol className="inline-flex items-center space-x-1 md:space-x-3">
      <li className="inline-flex items-center">
        <Link 
          to="/reports" 
          className="inline-flex items-center text-gray-700 hover:text-blue-600"
        >
          Reports
        </Link>
      </li>
      <li>
        <div className="flex items-center">
          <ChevronRight className="w-4 h-4 text-gray-400" />
          <span className="ml-1 text-gray-500 md:ml-2">Absent Report</span>
        </div>
      </li>
    </ol>
  </nav>
</div>
  {/* Redesigned Form Section */}
{/* Redesigned Form Section with Matching Style */}
<div className="bg-white rounded-lg shadow-md p-3 mb-3">
  <div className="flex space-x-6">
    {/* Search Employee */}
    <input
      type="text"
      placeholder="Search by Employee Name"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      className="w-60 h-15 mt-7 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
    />

    {/* Start Date */}
    <div className="w-[220px]">
      <label
        htmlFor="startDate"
        className="block text-sm font-medium text-gray-700"
      >
        Start Date
      </label>
      <input
        type="date"
        id="startDate"
        value={startDate}
        onChange={(e) => setStartDate(e.target.value)}
        className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
      />
    </div>

    {/* End Date */}
    <div className="w-[220px]">
      <label
        htmlFor="endDate"
        className="block text-sm font-medium text-gray-700"
      >
        End Date
      </label>
      <input
        type="date"
        id="endDate"
        value={endDate}
        onChange={(e) => setEndDate(e.target.value)}
        className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
      />
    </div>

    {/* Get Report Button */}
    <button
      onClick={fetchReport}
      disabled={!startDate || !endDate || loading}
      className="w-30 h-15 px-3 mt-7 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 text-sm transition duration-300"
    >
      {loading ? "Loading..." : "Get Report"}
    </button>

    {/* PDF Export Button */}
    {reportData.length > 0 && (
      <PDFDownloadLink
        document={<AbsentReportPDF data={filteredData} startDate={startDate} endDate={endDate} />}
        fileName={`absent-report-${startDate}-to-${endDate}.pdf`}
      >
        {({ loading }) => (
          <button
            className="bg-red-400 w-[60px] mt-7 h-10 text-white hover:bg-red-700 rounded-lg"
            disabled={loading}
          >
            {loading ? "Generating PDF..." : "PDF"}
          </button>
        )}
      </PDFDownloadLink>
    )}

    {/* Excel Export Button */}
    {reportData.length > 0 && (
      <button
        onClick={handleExportExcel}
        className="bg-green-500 w-[60px] h-10 mt-7 text-white rounded-md hover:bg-green-600"
      >
        Excel
      </button>
    )}
  </div>
</div>

      {/* Error Message */}
      {error && (
        <p className="text-red-500 text-center mb-4 text-sm">{error}</p>
      )}

      {/* Report Table */}
      {currentItems.length > 0 ? (
  <div className="overflow-x-auto bg-white shadow-md rounded-lg">
    <table className="min-w-full bg-white border-collapse table-auto text-sm cursor-pointer">
      <thead className="bg-gray-100">
        <tr>
          <th className="px-5 py-2 text-nowrap text-left font-medium text-gray-700">ID</th>
          <th className="px-8 py-2 text-nowrap text-left font-medium text-gray-700">Name</th>
          <th className="px-8 py-2 text-nowrap text-left font-medium text-gray-700">Designation</th>
          <th className="px-8 py-2 text-nowrap text-left font-medium text-gray-700">Department</th>
          <th className="px-8 text-nowrap text-left font-medium text-gray-700">Date</th>
          <th className="px-4 text-nowrap text-left font-medium text-gray-700">Status</th>
        </tr>
      </thead>
      <tbody>
        {currentItems.map((row, index) => (
          <tr
            key={index}
            className="border-b hover:bg-gray-50 transition duration-200 cursor-pointer"
          >
            <td className="px-5 py-2 text-nowrap text-left">{row.employeeid || "-"}</td>
            <td className="px-5 py-2 text-nowrap text-left">{row.employeename || "-"}</td>
            <td className="px-4 py-2 text-nowrap text-left">{row.designation || "-"}</td>
            <td className="px-4 py-2 text-nowrap text-left">{row.department || "-"}</td>
            <td className="px-4 text-nowrap text-left">{row.date || "-"}</td>
            <td className="px-4 text-nowrap text-left">{row.status || "-"}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
) : (
  <div className="text-center text-gray-500 py-4">
    <p>No records available for Selected Dates</p>
  </div>
)}


      {/* Pagination Controls */}
      {filteredData.length > itemsPerPage && (
        <div className="flex justify-around items-center mt-4">
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
          >
            Previous
          </button>
          <span className="text-sm">
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default AbsentReport;
