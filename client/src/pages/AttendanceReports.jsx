import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Card,
  CardHeader,
  Input,
  Dialog,
  Typography,
  Button,
  CardBody,
  Chip,
  CardFooter,
  Avatar,
  IconButton,
  Tooltip,
  Select,
  Option,
} from "@material-tailwind/react";
import { Link } from "react-router-dom";
import { ChevronRight, FileText } from "lucide-react";
import { useCompany } from "../contexts/CompanyContext";
import * as XLSX from "xlsx"; // Import xlsx for Excel export
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  PDFDownloadLink,
} from "@react-pdf/renderer"; // Import react-pdf/renderer components

const AttendanceReport = () => {
  const { companyName } = useCompany();
  const storedUser = localStorage.getItem("user");

  const LoggedUser = storedUser.replace(/["\n]/g, "").trim();
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [reportData, setReportData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const exportToExcel = () => {
    // Step 1: Convert data to worksheet
    const ws = XLSX.utils.json_to_sheet(
      filteredData.map((row) => ({
        ID: row.employeeid || "-",
        Name: row.employeename || "-",
        Date: row.punchindate || "-",
        "In Time": row.punchintime
          ? new Date(row.punchintime).toLocaleTimeString()
          : "-",
        "Out Time": row.punchouttime
          ? new Date(row.punchouttime).toLocaleTimeString()
          : "-",
        Shift: row.shift || "-",
        "Work Hrs": formatTime(row.totalworkingminutes),
        "Reg Work Hrs": formatTime(row.regularworkingminutes),
        "OT Hrs": formatTime(row.overtimeminutes),
        "Late Hrs": formatTime(row.lateminutes),
      }))
    );

    // Step 4: Create a new workbook and append the worksheet
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Attendance Report");

    // Step 5: Export the workbook as a file
    XLSX.writeFile(wb, "attendance_report_.xlsx");
  };

  const MyDocument = () => {
    const styles = StyleSheet.create({
      page: {
        padding: 20,
        fontFamily: "Helvetica",
        fontSize: 10,
        flexDirection: "column",
      },
      section: {
        marginBottom: 20,
      },
      title: {
        fontSize: 11,
        fontWeight: "bold",
        textAlign: "left", // Center title
      },
      headerRow: {
        flexDirection: "row", // Create a horizontal layout for Generated By and Company Name
        justifyContent: "space-between", // Space out the two elements
        marginBottom: 10,
      },
      generatedByText: {
        fontSize: 11,
        fontWeight: "bold",
        textAlign: "left", // Left-aligned text
        flex: 1, // Allow this section to take available space
      },
      companyText: {
        fontSize: 11,
        fontWeight: "bold",
        textAlign: "right", // Right-aligned text
        flex: 1, // Allow this section to take available space
      },
      dateText: {
        fontSize: 11,
        textAlign: "right", // Center Date Range
        marginVertical: 5,
      },
      table: {
        display: "table",
        width: "100%",
        borderStyle: "solid",
        borderColor: "#000",
        borderWidth: 1,
        marginTop: 10,
      },
      tableRow: {
        flexDirection: "row",
        backgroundColor: "#f0f0f0",
        borderBottom: "1px solid #ddd",
      },
      tableCell: {
        padding: 5,
        borderRight: "1px solid #ddd",
        textAlign: "center",
      },
      tableHeaderCell: {
        fontWeight: "bold",
        padding: 5,
        textAlign: "center",
        borderRight: "1px solid #ddd",
        backgroundColor: "#ddd", // Light grey for header cells
      },
      fixedWidth: {
        width: 100, // Fixed width for short text columns
      },
    });

    return (
      <Document>
        <Page style={styles.page} orientation="landscape">
          <View style={styles.section}>
            <View style={styles.headerRow}>
              <Text style={styles.title}>Report Type :In/Out </Text>
              <Text style={styles.dateText}>
                Generated from: {startDate} to {endDate}
              </Text>
            </View>
            <View style={styles.headerRow}>
              <Text style={styles.generatedByText}>
                Generated by: {LoggedUser}
              </Text>
              <Text style={styles.companyText}>
                Company Name: {companyName}
              </Text>
            </View>

            {/* Table */}
            <View style={styles.table}>
              {/* Table Header */}
              <View style={styles.tableRow}>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  ID
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Name
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Date
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  In Time
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Out Time
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Shift
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Work Hrs
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Reg Work Hrs
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  OT Hrs
                </Text>
                <Text style={[styles.tableHeaderCell, styles.fixedWidth]}>
                  Late Hrs
                </Text>
              </View>

              {/* Table data */}
              {reportData.map((row, index) => (
                <View key={index} style={styles.tableRow}>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.employeeid || "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.employeename || "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.punchindate || "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.punchintime
                      ? new Date(row.punchintime).toTimeString().split(" ")[0]
                      : "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.punchouttime
                      ? new Date(row.punchouttime).toTimeString().split(" ")[0]
                      : "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {row.shift || "-"}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {formatTime(row.totalworkingminutes)}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {formatTime(row.regularworkingminutes)}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {formatTime(row.overtimeminutes)}
                  </Text>
                  <Text style={[styles.tableCell, styles.fixedWidth]}>
                    {formatTime(row.lateminutes)}
                  </Text>
                </View>
              ))}
            </View>
          </View>
        </Page>
      </Document>
    );
  };

  useEffect(() => {
    const today = new Date();
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 2);

    const startDateString = sevenDaysAgo.toISOString().split("T")[0]; // Format as YYYY-MM-DD
    const endDateString = today.toISOString().split("T")[0]; // Format as YYYY-MM-DD

    setStartDate(startDateString);
    setEndDate(endDateString);
  }, []);

  // Automatically fetch report data once startDate and endDate are set
  useEffect(() => {
    if (startDate && endDate) {
      fetchReport();
    }
  }, [startDate, endDate]); // This effect runs when startDate or endDate changes

  const fetchReport = async () => {
    setLoading(true);
    setError("");

    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/attendance-report`,
        {
          params: { startDate, endDate },
        }
      );
      setReportData(response.data.data);
    } catch (error) {
      console.error("Error fetching report:", error);
      setError("Failed to fetch the report. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Filter report data based on search term
  const filteredData = reportData.filter((row) =>
    row.employeename.toLowerCase().includes(searchTerm.toLowerCase())
  );

  function formatTime(minutes) {
    if (!minutes || minutes === "-") return "-"; // If no value is provided, return '-'

    const totalSeconds = Math.round(minutes * 60);

    const hours = Math.floor(totalSeconds / 3600);
    const mins = Math.floor((totalSeconds % 3600) / 60);
    const secs = totalSeconds % 60;

    // Return formatted time as HH:MM:SS
    return `${String(hours).padStart(2, "0")}:${String(mins).padStart(
      2,
      "0"
    )}:${String(secs).padStart(2, "0")}`;
  }

  // Paginate the filtered data
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage((prevPage) => prevPage - 1);
    }
  };

  return (
    <div className="max-w-7xl mx-auto">
      <div className="mb-2">
        <nav className="flex" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <Link
                to="/reports"
                className="inline-flex items-center text-gray-700 hover:text-blue-600"
              >
                Reports
              </Link>
            </li>
            <li>
              <div className="flex items-center">
                <ChevronRight className="w-4 h-4 text-gray-400" />
                <span className="ml-1 text-gray-500 md:ml-2">
                  In/Out Report
                </span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
      {/* Form Section */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <div className="flex items-center space-x-6">
          {/* Search Input */}
          <div className=" min-w-[220px] mt-8">
            <input
              type="text"
              placeholder="Search by Employee Name"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full h-10 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>

          {/* Start Date Input */}
          <div className="min-w-[220px]">
            <label
              htmlFor="startDate"
              className="block text-sm font-medium text-gray-700"
            >
              Start Date
            </label>
            <input
              type="date"
              id="startDate"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="mt-2 w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>

          {/* End Date Input */}
          <div className="min-w-[220px]">
            <label
              htmlFor="endDate"
              className="block text-sm font-medium text-gray-700"
            >
              End Date
            </label>
            <input
              type="date"
              id="endDate"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="mt-2 w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>

          {/* Get Report Button */}
          <button
            onClick={fetchReport}
            disabled={!startDate || !endDate || loading}
            className="w-32 h-10 bg-blue-600 mt-6 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 text-sm transition duration-300"
          >
            {loading ? "Loading..." : "Get Report"}
          </button>

          {/* Export Buttons */}
          <div className="flex  space-x-4 mt-6">
            <PDFDownloadLink
              document={<MyDocument />}
              fileName="attendance_report.pdf"
            >
              {({ loading }) =>
                loading ? (
                  <Button className="bg-blue-600 w-32 h-10 text-white hover:bg-blue-700 py-2 px-4 rounded-lg">
                    Generating PDF...
                  </Button>
                ) : (
                  <Button className="bg-red-400 w-32 h-10 text-white hover:bg-red-700 py-2 px-4 rounded-lg">
                    PDF
                  </Button>
                )
              }
            </PDFDownloadLink>
            <Button
              onClick={exportToExcel}
              className="bg-green-400 w-32 h-10 text-white hover:bg-green-700 py-2 px-4 rounded-lg"
            >
              Excel
            </Button>
          </div>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <p className="text-red-500 text-center mb-4 text-sm">{error}</p>
      )}

      {/* Report Table */}
      {currentItems.length > 0 && (
        <div className="overflow-x-auto bg-white shadow-md rounded-lg">
          <table className="min-w-full bg-white border-collapse table-auto text-sm cursor-pointer">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-5 py-2 text-nowrap text-center font-medium text-gray-700">
                  ID
                </th>
                <th className="px-8 py-2 text-nowrap text-left font-medium text-gray-700">
                  Name
                </th>
                <th className="px-8 text-nowrap text-left font-medium text-gray-700">
                  Date
                </th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">
                  In Time
                </th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">
                  Out Time
                </th>
                <th className="px-8 text-nowrap text-center font-medium text-gray-700">
                  Shift
                </th>
                {/* <th className="px-3 text-nowrap text-left font-medium text-gray-700">Shift In Time</th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">Shift Out Time</th> */}
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">
                  {" "}
                  Work Hrs
                </th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">
                  Reg Work Hrs
                </th>
                <th className="px-5 text-nowrap text-left font-medium text-gray-700">
                  OT Hrs
                </th>
                <th className="px-5 text-nowrap text-left font-medium text-gray-700">
                  Late Hrs
                </th>
                {/* <th className="px-8 text-nowrap text-left font-medium text-gray-700">
                  Day Info
                </th> */}
              </tr>
            </thead>
            <tbody>
              {currentItems.map((row, index) => (
                <tr
                  key={index}
                  className="border-b hover:bg-gray-50 transition duration-200 cursor-pointer"
                >
                  <td className="px-5 py-2 text-nowrap text-center">
                    {row.employeeid || "-"}
                  </td>
                  <td className="px-5 py-2 text-nowrap text-center">
                    {row.employeename || "-"}
                  </td>
                  <td className="px-4 text-nowrap text-center">
                    {row.punchindate || "-"}
                  </td>

                  <td className="px-4 text-nowrap text-center">
                    {row.punchintime && !isNaN(new Date(row.punchintime))
                      ? new Date(row.punchintime).toTimeString().split(" ")[0]
                      : "-"}
                  </td>
                  <td className="px-4 text-nowrap text-center">
                    {row.punchouttime && !isNaN(new Date(row.punchouttime))
                      ? new Date(row.punchouttime).toTimeString().split(" ")[0]
                      : "-"}
                  </td>

                  <td className="px-10 text-center text-nowrap">
                    {row.shift || "-"}
                  </td>
                  {/* Shift in and out time can be optionally displayed if needed */}
                  {/* <td className="px-4 text-nowrap text-center">{row.shiftintime || '-'}</td>
      <td className="px-4 text-nowrap text-center">{row.shiftouttime || '-'}</td> */}

                  {/* Format total working minutes */}
                  <td className="px-4 text-nowrap text-center">
                    {formatTime(row.totalworkingminutes)}
                  </td>

                  {/* Format regular working minutes */}
                  <td className="px-4 text-nowrap text-center">
                    {formatTime(row.regularworkingminutes)}
                  </td>

                  {/* Format overtime minutes */}
                  <td className="px-4 text-nowrap text-center">
                    {formatTime(row.overtimeminutes)}
                  </td>

                  {/* Format late minutes */}
                  <td className="px-4 text-nowrap text-center">
                    {formatTime(row.lateminutes)}
                  </td>

                  {/* <td className="px-4 text-nowrap text-center">
                    {row.absenceflag || "Absent"}
                  </td> */}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Pagination Controls */}
      {filteredData.length > itemsPerPage && (
        <div className="flex justify-around items-center mt-4">
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
          >
            Previous
          </button>
          <span className="text-sm">
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-blue-300 text-sm rounded-md disabled:bg-gray-200"
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default AttendanceReport;
