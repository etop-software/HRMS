import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { ChevronRight } from "lucide-react";
import {
  Card,
  Button,
  Input,
} from "@material-tailwind/react";
import {
  PDFDownloadLink,
  Document,
  Page,
  Text,
  View,
  StyleSheet,
} from "@react-pdf/renderer";
import * as XLSX from "xlsx";
import { useCompany } from "../contexts/CompanyContext";

const EarlyLeaveReport = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [reportData, setReportData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const { companyName } = useCompany();
  const storedUser = localStorage.getItem('userName');
  const LoggedUser = storedUser.replace(/["\n]/g, '').trim();

  const MyDocument = () => {
    const styles = StyleSheet.create({
      page: {
        padding: 20,
        fontFamily: "Helvetica",
        fontSize: 10,
      },
      section: {
        marginBottom: 20,
      },
      table: {
        display: "table",
        width: "100%",
        borderStyle: "solid",
        borderColor: "#000",
        borderWidth: 1,
        marginTop: 10,
      },
      tableRow: {
        flexDirection: "row",
        borderBottom: "1px solid #ddd",
      },
      tableHeaderRow: {
        flexDirection: "row",
        backgroundColor: "#e0e0e0",
      },
      tableCell: {
        padding: 5,
        borderRight: "1px solid #ddd",
        textAlign: "center",
      },
      tableHeaderCell: {
        fontWeight: "bold",
        padding: 5,
        textAlign: "center",
        borderRight: "1px solid #ddd",
      },
      columnID: {
        width: 50,
      },
      columnFlex: {
        flex: 1,
      },
      columnLateHrs: {
        width: 50,
      },
    });

    return (
      <Document>
        <Page style={styles.page}>
          <View style={styles.section}>
            <Text style={styles.title}>Report Type: Early Leave</Text>
            <Text style={styles.dateText}>Generated from: {startDate} to {endDate}</Text>
            <Text style={styles.generatedByText}>Generated by: {LoggedUser}</Text>
            <Text style={styles.companyText}>Company Name: {companyName}</Text>

            {/* Table */}
            <View style={styles.table}>
              {/* Table Header */}
              <View style={styles.tableHeaderRow}>
                <Text style={[styles.tableHeaderCell, styles.columnID]}>ID</Text>
                <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Name</Text>
                <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Date</Text>
                <Text style={[styles.tableHeaderCell, styles.columnFlex]}>In Time</Text>
                <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Out Time</Text>
                <Text style={[styles.tableHeaderCell, styles.columnFlex]}>Total Hours</Text>
                <Text style={[styles.tableHeaderCell, styles.columnLateHrs]}>Early Leave</Text>
                <Text style={[styles.tableHeaderCell, styles.columnLateHrs]}>Shift Out Time</Text>
              </View>

              {/* Table data */}
              {reportData.map((row, index) => (
                <View key={index} style={styles.tableRow}>
                  <Text style={[styles.tableCell, styles.columnID]}>{row.employee_id}</Text>
                  <Text style={[styles.tableCell, styles.columnFlex]}>{row.employee_name}</Text>
                  <Text style={[styles.tableCell, styles.columnFlex]}>{row.work_date.split("T")[0] || "-"}</Text>
                  <Text style={[styles.tableCell, styles.columnFlex]}>{row.intime || "-"}</Text>
                  <Text style={[styles.tableCell, styles.columnFlex]}>{row.outime || "-"}</Text>
                  <Text style={[styles.tableCell, styles.columnFlex]}>{row.totalhrs || "-"}</Text>
                  <Text style={[styles.tableCell, styles.columnLateHrs]}>{row.early_leave || "-"}</Text>
                  <Text style={[styles.tableCell, styles.columnLateHrs]}>{row.shift_out_time || "-"}</Text>
                </View>
              ))}
            </View>
          </View>
        </Page>
      </Document>
    );
  };

  useEffect(() => {
    const today = new Date();
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 2);
    setStartDate(sevenDaysAgo.toISOString().split("T")[0]);
    setEndDate(today.toISOString().split("T")[0]);
  }, []);

  useEffect(() => {
    if (startDate && endDate) {
      fetchReport();
    }
  }, [startDate, endDate]);

  const fetchReport = async () => {
    setLoading(true);
    setError("");

    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/api/Reports/Early-leave-report`,
        { params: { startDate, endDate } }
      );
      setReportData(response.data.data || []);
      console.log(response.data.data);  
    } catch (error) {
      console.error("Error fetching report:", error);
      setError("Failed to fetch the report. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(
      reportData.map((row) => ({
        "ID": row.employee_id,
        "Name": row.employee_name,
        "Date": row.work_date.split("T")[0] || "-",
        "In Time": row.intime || "-",
        "Out Time": row.outime || "-",
        "Total Hours": row.totalhrs || "-",
        "Early Leave": row.early_leave || "-",
        "Shift Out Time": row.shift_out_time || "-",
      }))
    );

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Early Leave Report");
    XLSX.writeFile(wb, "Early_Leave_Report.xlsx");
  };

  return (
    <div className="max-w-7xl mx-auto">
      <div className="mb-2">
        <nav className="flex" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <Link to="/reports" className="inline-flex items-center text-gray-700 hover:text-blue-600">
                Reports
              </Link>
            </li>
            <li>
              <div className="flex items-center">
                <ChevronRight className="w-4 h-4 text-gray-400" />
                <span className="ml-1 text-gray-500 md:ml-2">Early Leave Report</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
      <div className="bg-white rounded-lg shadow-md p-3 mb-3">
        <div className="flex space-x-6">
          <input
            type="text"
            placeholder="Search by Employee Name"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-60 h-15 mt-7 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
          />
          <div className="w-[220px]">
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">
              Start Date
            </label>
            <input
              type="date"
              id="startDate"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>
          <div className="w-[220px]">
            <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">
              End Date
            </label>
            <input
              type="date"
              id="endDate"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="mt-2 p-3 w-full border cursor-pointer border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
            />
          </div>
          <button
            onClick={fetchReport}
            disabled={!startDate || !endDate || loading}
            className="w-30 h-15 px-3 mt-7 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 text-sm transition duration-300"
          >
            {loading ? "Loading..." : "Get Report"}
          </button>
          <PDFDownloadLink document={<MyDocument />} fileName="Early_Leave_Report.pdf">
            {({ loading }) =>
              loading ? (
                <Button className="bg-blue-600 w-30 h-10 mt-7 text-white hover:bg-blue-700 rounded-lg">
                  Generating PDF...
                </Button>
              ) : (
                <Button className="bg-red-400 w-30 mt-7 h-10 text-white hover:bg-red-700 rounded-lg">
                  PDF
                </Button>
              )
            }
          </PDFDownloadLink>
          <button
            onClick={exportToExcel}
            className="bg-green-500 w-[60px] h-10 mt-7 text-white rounded-md hover:bg-green-600"
          >
            Excel
          </button>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <p className="text-red-500 text-center mb-4 text-sm">{error}</p>
      )}

      {/* Report Table */}
      {reportData.length > 0 ? (
        <div className="overflow-x-auto bg-white shadow-md rounded-lg">
          <table className="min-w-full bg-white border-collapse table-auto text-sm cursor-pointer">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-5 py-2 text-nowrap text-left font-medium text-gray-700">ID</th>
                <th className="px-5 py-2 text-nowrap text-left font-medium text-gray-700">Name</th>
                <th className="px-8 text-nowrap text-left font-medium text-gray-700">Date</th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">In Time</th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">Out Time</th>
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">Shift Out Time</th>
                {/* <th className="px-3 text-nowrap text-left font-medium text-gray-700">Total Hours</th> */}
                <th className="px-3 text-nowrap text-left font-medium text-gray-700">Early Leave</th>
              
              </tr>
            </thead>
            <tbody>
              {reportData
                .filter((row) => {
                  const employeeName = row.employee_name.toLowerCase();
                  return employeeName.includes(searchTerm.toLowerCase());
                })
                .map((row, index) => (
                  <tr key={index} className="hover:bg-gray-100 transition duration-200">
                    <td className="px-5 py-2 border-b">{row.employee_id}</td>
                    <td className="px-5 py-2 border-b">{row.employee_name}</td>
                    <td className="px-8 border-b">{row.work_date.split("T")[0]}</td>
                    <td className="px-3 border-b">{row.intime}</td>
                    <td className="px-3 border-b">{row.outime}</td>
                    <td className="px-3 border-b">{row.shift_out_time}</td>
                    {/* <td className="px-3 border-b">{row.totalhrs}</td> */}
                    <td className="px-3 border-b">{row.early_leave}</td>
                 
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p className="text-center text-gray-500">No report available for the selected dates.</p>
      )}
    </div>
  );
};

export default EarlyLeaveReport;
