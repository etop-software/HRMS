const PDFDocument = require('pdfkit');

const multiinoutgenpdf = (res, data, companyName, startDate, endDate, loggedUser) => {
  const doc = new PDFDocument({ size: 'A4', layout: 'landscape', margin: 10 });
  const dateTime = new Date().toLocaleString();

  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', 'attachment; filename=AttendanceReport.pdf');

  // Error handling
  doc.on('error', (err) => {
    console.error('PDF Error:', err);
    res.status(500).end();
  });

  res.on('error', (err) => {
    console.error('Response Error:', err);
  });

  const styles = {
    headerColor: '#2c3e50',
    accentColor: '#3498db',
    rowEvenColor: '#f8f9fa',
    rowOddColor: '#ffffff',
    footerColor: '#95a5a6',
    headerFontSize: 11,
    subHeaderFontSize: 10,
    tableHeaderFontSize: 9,
    bodyFontSize: 9,
  };

  const columns = [
    { header: 'ID', width: 40 },
    { header: 'Name', width: 60 },
    { header: 'Dept', width: 50 },
    { header: 'Date', width: 60 },
    { header: 'TS', width: 30 },
    { header: 'PI1', width: 30 },
    { header: 'PO1', width: 30 },
    { header: 'T1', width: 30 },
    { header: 'PI2', width: 30 },
    { header: 'PO2', width: 30 },
    { header: 'T2', width: 30 },
    { header: 'PI3', width: 30 },
    { header: 'PO3', width: 30 },
    { header: 'T3', width: 30 },
    { header: 'PI4', width: 30 },
    { header: 'PO4', width: 30 },
    { header: 'T4', width: 30 },
    { header: 'PI5', width: 30 },
    { header: 'PO5', width: 30 },
    { header: 'T5', width: 30 },
    { header: 'PI6', width: 30 },
    { header: 'PO6', width: 30 },
    { header: 'T6', width: 30 },
  
  ];

  let isEvenRow = false;
  let pageNumber = 1;

  const formatDate = (dateValue) => {
    if (!dateValue) return '--';
    const date = new Date(dateValue);
    return date.toLocaleDateString('en-CA'); // Local date in YYYY-MM-DD
  };

  const addMainHeader = () => {
    doc.fillColor(styles.headerColor)
      .font('Helvetica-Bold')
      .fontSize(styles.headerFontSize)
      .text(`${companyName} Attendance Report`, { align: 'center' })
      .moveDown(0.3);

    doc.fontSize(styles.subHeaderFontSize)
      .text(`Generated by: ${loggedUser} | ${dateTime}`, { align: 'center' })
      .text(`Date Range: ${startDate} to ${endDate}`, { align: 'center' })
      .moveDown(1);

    doc.moveTo(40, doc.y).lineTo(doc.page.width - 40, doc.y).stroke();
  };

  const addFooter = () => {
    doc.save()
      .fontSize(styles.subHeaderFontSize)
      .fillColor(styles.footerColor)
      .text(`Page ${pageNumber}`, 40, doc.page.height - 40, { align: 'left' })
      .restore();
  };

  const createTableHeaders = () => {
    let y = doc.y + 5;
    doc.font('Helvetica-Bold').fontSize(styles.tableHeaderFontSize);
    let x = 40;

    columns.forEach((col) => {
      doc.fill(styles.headerColor)
        .rect(x, y, col.width, 20)
        .fillAndStroke(styles.headerColor, styles.headerColor);

      doc.fillColor('#ffffff')
        .text(col.header, x + 5, y + 5, {
          width: col.width - 10,
          align: col.align || 'left',
        });

      x += col.width;
    });

    doc.y = y + 20;
  };

  const createTableRow = (row) => {
    const rowColor = isEvenRow ? styles.rowEvenColor : styles.rowOddColor;
    isEvenRow = !isEvenRow;
    let x = 20;
    let y = doc.y;

    columns.forEach((col) => {
      doc.rect(x, y, col.width, 20)
        .fill(rowColor)
        .stroke('#e0e0e0');
      x += col.width;
    });

    x = 40;
    const rowData = [
      row.employee_id,
      row.name,
      row.department_name,
      formatDate(row.date),
      row.total_sum_hhmm || '00:00',
      row.punchin1 || 'N/A',
      row.punchout1 || 'N/A',
      row.total1_hhmm || '00:00',
      row.punchin2 || 'N/A',
      row.punchout2 || 'N/A',
      row.total2_hhmm || '00:00',
      row.punchin3 || 'N/A',
      row.punchout3 || 'N/A',
      row.total3_hhmm || '00:00',
     row.punchin4 || 'N/A',
      row.punchout4 || 'N/A',
      row.total4_hhmm || '00:00',
      row.punchin5 || 'N/A',
      row.punchout5 || 'N/A',
      row.total5_hhmm || '00:00',
    row.punchin6 || 'N/A',  
    row.punchout6 || 'N/A',
      row.total6_hhmm || '00:00',
    ];

    rowData.forEach((cell, index) => {
      doc.fillColor('#000000')
        .font('Helvetica')
        .fontSize(styles.bodyFontSize)
        .text(cell, x + 5, y + 5, {
          width: columns[index].width - 5,
          align: columns[index].align || 'left',
        });
      x += columns[index].width;
    });

    doc.y += 20;
  };

  const createNewPage = () => {
    doc.addPage();
    pageNumber++;
    createTableHeaders();
    doc.y += 1;
  };

  doc.pipe(res);

  addMainHeader();
  createTableHeaders();

  data.forEach((row) => {
    if (doc.y + 25 > doc.page.height - 60) {
      addFooter();
      createNewPage();
    }
    createTableRow(row);
  });

  addFooter();

  doc.end();
};

module.exports = multiinoutgenpdf;
